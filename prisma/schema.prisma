// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum products_remark {
  popular
  new
  top
  special
  trending
  regular
}

enum invoice_delivery_status {
  Pending
  Processing
  Completed
}

enum policies_type {
  about
  terms
  refund
  contact
  complain
}


model Brands {
  id Int @id @default(autoincrement())
  brandName String @unique @db.VarChar(50)
  brandImage String @db.VarChar(300)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products Products[]
}

model Categories {
  id Int @id @default(autoincrement())
  categoryName String @unique @db.VarChar(50)
  categoryImage String @db.VarChar(300)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products Products[]
}

model Products {
  id Int @id @default(autoincrement())
  title String  @db.VarChar(200)
  short_des String @db.VarChar(500)
  price Float
  discount Boolean
  discount_price Float
  image String @db.VarChar(200)
  stock Boolean
  star Float
  remark products_remark
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  brandId Int
  categoryId Int

  invoice_products InvoiceProducts[]
  product_cards ProductCards[]
  product_details ProductDetails?
  product_reviews ProductReviews[]
  product_sliders ProductSliders?
  product_wishes ProductWishes[]

  brand Brands @relation(fields: [brandId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  category Categories @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model ProductDetails {
  id Int @id @default(autoincrement())
  img1 String @db.VarChar(200)
  img2 String @db.VarChar(200)
  img3 String @db.VarChar(200)
  img4 String @db.VarChar(200)
  img5 String @db.VarChar(200)
  img6 String @db.VarChar(200)
  img7 String @db.VarChar(200)
  img8 String @db.VarChar(200)
  des String @db.Text
  color String @db.VarChar(200)
  size String @db.VarChar(200)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  productId Int @unique

  product Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductSliders {
  id Int @id @default(autoincrement())
  title String @db.VarChar(200)
  short_des String @db.VarChar(500)
  price String @db.VarChar(100)
  image String @db.VarChar(200)
  productId Int @unique
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Users {
  id Int @id @default(autoincrement())
  email String @unique
  otp String @db.VarChar(10)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  
  customer_profiles CustomerProfiles?
  invoice_products InvoiceProducts[]
  invoices Invoices[]
  product_cards ProductCards[]
  product_wishes ProductWishes[]
}

model CustomerProfiles {
  id Int @id @default(autoincrement())
  cus_name String @db.VarChar(100)
  cus_add String @db.VarChar(500)
  cus_city String @db.VarChar(50)
  cus_state String @db.VarChar(50)
  cus_postcode String @db.VarChar(50)
  cus_country String @db.VarChar(50)
  cus_phone String @db.VarChar(50)
  cus_fax String @db.VarChar(50)
  ship_name String @db.VarChar(100)
  ship_add String @db.VarChar(100)
  ship_city String @db.VarChar(100)
  ship_state String @db.VarChar(100)
  ship_postcode String @db.VarChar(100)
  ship_country String @db.VarChar(100)
  ship_phone String @db.VarChar(50)
  userId Int @unique
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_reviews ProductReviews[]
}

model ProductCards {
  id Int @id @default(autoincrement())
  userId Int
  productId Int
  color String @db.VarChar(200)
  size String @db.VarChar(200)
  qty Float
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductWishes {
  id Int @id @default(autoincrement())
  userId Int
  productId Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductReviews {
  id Int @id @default(autoincrement())
  description String @db.VarChar(1000)
  rating String @db.VarChar(10)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  productId Int
  customerId Int

  product Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customer_profiles CustomerProfiles @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Invoices {
  id Int @id @default(autoincrement())
  total Float
  vat Float
  payable Float
  cus_details String @db.VarChar(500)
  ship_details String @db.VarChar(500)
  tran_id String @db.VarChar(100)
  val_id String @default("0") @db.VarChar(100)
  delivery_status invoice_delivery_status
  payment_status String @db.VarChar(255)

  userId Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoice_products InvoiceProducts[]
}

model InvoiceProducts {
  id Int @id @default(autoincrement())
  productId Int
  invoiceId Int
  userId Int
  qty Float
  sale_price Float
  color String @db.VarChar(50)
  size String @db.VarChar(50)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  product Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoice Invoices @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Policies {
  id Int @id @default(autoincrement())
  type policies_type
  des String @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model Sslcommerz_accounts {
  id Int @id @default(autoincrement())
  store_id String @db.VarChar(255)
  store_passwd String @db.VarChar(255)
  currency String @db.VarChar(255)
  success_url String @db.VarChar(255)
  fail_url String @db.VarChar(255)
  cancel_url String @db.VarChar(255)
  ipn_url String @db.VarChar(255)
  init_url String @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model Features {
  id Int @id @default(autoincrement())
  name String @db.VarChar(200)
  description String @db.Text
  image String @db.VarChar(300)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}